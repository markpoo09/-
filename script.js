document.addEventListener('DOMContentLoaded', () => {
    const homeContent = document.getElementById('content-home');
    const aboutContent = document.getElementById('content-about');
    const generateContent = document.getElementById('content-generate');
    const startBtn = document.getElementById('start-create-btn');
    const navHome = document.getElementById('nav-home');
    const navGenerate = document.getElementById('nav-generate');
    const promptInput = document.getElementById('prompt-input');
    const generateIdeaBtn = document.getElementById('generate-idea-btn');
    const generateArtBtn = document.getElementById('generate-art-btn');
    const imageOutput = document.getElementById('image-output');
    const statusMessage = document.getElementById('status-message');
    const styleBtns = document.querySelectorAll('.style-btn');

    let selectedStyle = 'Realistic';

    // Navigation active state
    const setActiveNav = (activeNav) => {
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        activeNav.classList.add('active');
    };

    // Show generate page
    const showGeneratePage = () => {
        homeContent.classList.add('hidden');
        aboutContent.classList.add('hidden');
        generateContent.classList.remove('hidden');
        setActiveNav(navGenerate);
    };

    // Show home page
    const showHomePage = () => {
        homeContent.classList.remove('hidden');
        aboutContent.classList.remove('hidden');
        generateContent.classList.add('hidden');
        setActiveNav(navHome);
    };

    startBtn.addEventListener('click', showGeneratePage);
    
    navGenerate.addEventListener('click', (e) => {
        e.preventDefault();
        showGeneratePage();
    });

    navHome.addEventListener('click', (e) => {
        e.preventDefault();
        showHomePage();
    });

    // Style selection
    styleBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            document.querySelector('.style-btn.active').classList.remove('active');
            btn.classList.add('active');
            selectedStyle = btn.getAttribute('data-style');
            console.log('Selected Style:', selectedStyle);
        });
    });

    // Enhance prompt (‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô Generate Idea)
    generateIdeaBtn.addEventListener('click', async () => {
        statusMessage.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á prompt ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Stable Diffusion...';
        statusMessage.classList.remove('hidden');
        statusMessage.style.backgroundColor = 'lightblue';

        const userPrompt = promptInput.value.trim();

        if (!userPrompt) {
            statusMessage.textContent = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Prompt ‡∏Å‡πà‡∏≠‡∏ô';
            statusMessage.style.backgroundColor = 'lightcoral';
            return;
        }

        try {
            const response = await fetch('http://localhost:3000/generate-idea', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ prompt: userPrompt, style: selectedStyle })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            promptInput.value = data.idea;
            statusMessage.textContent = `‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á prompt ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (${data.note || '‡∏™‡πÑ‡∏ï‡∏•‡πå: ' + selectedStyle})`;
            statusMessage.style.backgroundColor = 'lightgreen';

        } catch (error) {
            console.error("Error enhancing prompt:", error);
            statusMessage.textContent = '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á prompt';
            statusMessage.style.backgroundColor = 'lightcoral';
        }
    });

    // Generate art with Stable Diffusion
    generateArtBtn.addEventListener('click', async () => {
        const prompt = promptInput.value.trim();
        if (!prompt) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå Prompt ‡∏Å‡πà‡∏≠‡∏ô');
            return;
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        statusMessage.textContent = 'üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Stable Diffusion 2.1... (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 15-30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)';
        statusMessage.classList.remove('hidden');
        statusMessage.style.backgroundColor = 'lightblue';
        imageOutput.innerHTML = '<div style="text-align: center; padding: 40px; font-size: 18px;">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...<br><small style="color: #666;">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</small></div>';

        try {
            const response = await fetch('http://localhost:3000/generate-art', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ prompt: prompt })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            
            if (data.image) {
                const imageURL = data.image;
                imageOutput.innerHTML = `
                    <img src="${imageURL}" alt="Generated Art" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
                    <div style="margin-top: 10px; font-size: 12px; color: #666; text-align: center;">
                        Prompt: "${prompt}"
                    </div>
                `;
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤
                if (data.source === 'huggingface') {
                    statusMessage.textContent = 'üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢ Stable Diffusion 2.1 via Hugging Face!';
                    statusMessage.style.backgroundColor = 'lightgreen';
                } else if (data.source === 'canvas' || data.fallbackUsed) {
                    statusMessage.textContent = '‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á - Hugging Face API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
                    statusMessage.style.backgroundColor = 'lightyellow';
                } else {
                    statusMessage.textContent = '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!';
                    statusMessage.style.backgroundColor = 'lightgreen';
                }

                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                if (data.note) {
                    const noteDiv = document.createElement('div');
                    noteDiv.style.cssText = 'margin-top: 5px; font-size: 11px; color: #888; text-align: center;';
                    noteDiv.textContent = data.note;
                    imageOutput.appendChild(noteDiv);
                }

            } else {
                throw new Error('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å server');
            }

        } catch (error) {
            console.error("Error generating art:", error);
            statusMessage.textContent = `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`;
            statusMessage.style.backgroundColor = 'lightcoral';
            imageOutput.innerHTML = `
                <div style="text-align: center; padding: 40px; color: #999;">
                    ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ<br>
                    <small>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</small>
                </div>
            `;
        }
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Enter key ‡πÉ‡∏ô prompt input
    promptInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            generateArtBtn.click();
        }
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà
    promptInput.addEventListener('input', () => {
        if (statusMessage.textContent.includes('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î') || 
            statusMessage.textContent.includes('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à') ||
            statusMessage.textContent.includes('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')) {
            statusMessage.classList.add('hidden');
            statusMessage.style.backgroundColor = '';
        }
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° tooltip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
    generateIdeaBtn.title = "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á prompt ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Stable Diffusion";
    generateArtBtn.title = "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Stable Diffusion 2.1 ‡∏ú‡πà‡∏≤‡∏ô Hugging Face API";
});